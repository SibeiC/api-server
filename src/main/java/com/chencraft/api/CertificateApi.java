/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.71).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.chencraft.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import reactor.core.publisher.Mono;

import static com.chencraft.api.models.ResponseConstants.*;
import static com.chencraft.api.models.TagConstants.TLS;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-08-22T12:16:37.352130473Z[Etc/UTC]")
@Validated
public interface CertificateApi {

    @Operation(summary = "Request issuance of TLS certificate for client", description = "For client device to request a TLS certificate issued by the server", tags = {TLS})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", ref = OK_PEM_RESPONSE),
            @ApiResponse(responseCode = "400", ref = INVALID_INPUT_RESPONSE),
            @ApiResponse(responseCode = "401", ref = UNAUTHORIZED_RESPONSE),
            @ApiResponse(ref = INTERNAL_SERVER_ERROR_RESPONSE)})
    @RequestMapping(value = "/certificate/issue",
            produces = {MediaType.APPLICATION_JSON_VALUE},
            method = RequestMethod.GET)
    Mono<ResponseEntity<?>> certificateIssue(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Onboarding token issued to trusted devices", required = true, schema = @Schema()) @Valid @RequestParam(value = "token") String token,
                                             @NotNull @Parameter(in = ParameterIn.QUERY, description = "Device name, used for certificate CN", required = true, schema = @Schema()) @Valid @RequestParam(value = "deviceId") String deviceId,
                                             @Parameter(in = ParameterIn.QUERY, description = "Whether to return certificate in single PEM format") @RequestParam(value = "pemFormat", defaultValue = "false") boolean pemFormat
    );
}

