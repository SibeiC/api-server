/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.71).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.chencraft.api.secure;

import com.chencraft.model.CertificateRenewal;
import com.chencraft.model.CertificateRevokeRequest;
import com.chencraft.model.OnboardingToken;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import reactor.core.publisher.Mono;

import java.util.Map;

import static com.chencraft.api.models.ResponseConstants.*;
import static com.chencraft.api.models.TagConstants.TLS;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-08-22T12:16:37.352130473Z[Etc/UTC]")
@Validated
@SecurityScheme(type = SecuritySchemeType.MUTUALTLS)
public interface SecureCertificateApi {

    @Operation(summary = "Issue onboarding token", description = "Issues a short-lived onboarding token for client certification issuance", security = {@SecurityRequirement(name = "mTLS")}, tags = {TLS})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Responding with token and valid until time", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = OnboardingToken.class))),
            @ApiResponse(responseCode = "401", ref = UNAUTHORIZED_RESPONSE),
            @ApiResponse(ref = INTERNAL_SERVER_ERROR_RESPONSE)
    })
    @RequestMapping(value = "/authorize",
            produces = {MediaType.APPLICATION_JSON_VALUE},
            method = RequestMethod.GET)
    ResponseEntity<OnboardingToken> authorize();


    @Operation(summary = "Renew client certificate", description = "Refresh client certificate before expiry", security = {
            @SecurityRequirement(name = "mTLS")}, tags = {TLS})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", ref = OK_PEM_RESPONSE),
            @ApiResponse(responseCode = "400", ref = INVALID_INPUT_RESPONSE),
            @ApiResponse(responseCode = "401", ref = UNAUTHORIZED_RESPONSE),
            @ApiResponse(ref = INTERNAL_SERVER_ERROR_RESPONSE)
    })
    @RequestMapping(value = "/certificate/renew",
            produces = {MediaType.APPLICATION_JSON_VALUE},
            consumes = {MediaType.APPLICATION_JSON_VALUE},
            method = RequestMethod.POST)
    Mono<ResponseEntity<?>> renew(@Parameter(in = ParameterIn.DEFAULT, description = "Certificate renewal request", schema = @Schema(implementation = CertificateRenewal.class)) @NotNull @Valid @RequestBody CertificateRenewal certificateRenewal);

    @Operation(summary = "Revoke certificate(s)", description = "Revokes certificate record identified by mongoId, deviceId, or fingerprintSha256.", security = {
            @SecurityRequirement(name = "mTLS")}, tags = {TLS})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Revocation completed"),
            @ApiResponse(responseCode = "400", ref = INVALID_INPUT_RESPONSE),
            @ApiResponse(responseCode = "401", ref = UNAUTHORIZED_RESPONSE),
            @ApiResponse(ref = INTERNAL_SERVER_ERROR_RESPONSE)
    })
    @RequestMapping(value = "/certificate/revoke",
            produces = {MediaType.APPLICATION_JSON_VALUE},
            consumes = {MediaType.APPLICATION_JSON_VALUE},
            method = RequestMethod.POST)
    Mono<ResponseEntity<String>> revoke(@Parameter(in = ParameterIn.DEFAULT, description = "Revocation request", schema = @Schema(implementation = CertificateRevokeRequest.class)) @NotNull @Valid @RequestBody CertificateRevokeRequest revokeRequest);
}

