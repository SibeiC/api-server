name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write
  packages: write
  id-token: write
  security-events: write

jobs:
  ci-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      app-version: ${{ steps.extract-version.outputs.app-version }}

    concurrency:
      group: ci-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout src code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v5
        with:
          java-version: "21"
          distribution: "temurin"
          cache: maven

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Cache Embedded Mongo (flapdoodle)
        uses: actions/cache@v4
        with:
          path: ~/.embedmongo
          key: ${{ runner.os }}-flapdoodle-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-flapdoodle-

      - name: Extract version (strip leading v of tag)
        id: extract-version
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          RAW_VERSION=${GITHUB_REF#refs/tags/}
          APP_VERSION=${RAW_VERSION#v}
          mvn -B versions:set -DnewVersion=${APP_VERSION}
          echo "app-version=${APP_VERSION}" >> $GITHUB_OUTPUT

      - name: Build and Verify
        run: mvn -B -P ci -DskipTests=false clean verify

      - name: Publish Test Summary
        if: always()
        uses: test-summary/action@v2
        with:
          paths: |
            target/surefire-reports/*.xml
            target/failsafe-reports/*.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          name: api-server-jar
          path: target/api-server.jar

      - name: Update dependency graph
        uses: advanced-security/maven-dependency-submission-action@v5
        if: ${{ github.event_name != 'pull_request' }}

  docker:
    runs-on: ubuntu-latest
    needs: ci-test
    timeout-minutes: 20
    # ðŸš¨ only run if this workflow was triggered by a tag push (release)
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout files for Docker creation
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            Dockerfile
            entrypoint.sh
            .env.enc
          sparse-checkout-cone-mode: false

      - name: Download JAR artifact
        uses: actions/download-artifact@v5
        with:
          name: api-server-jar
          path: app/

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up repo info
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ needs.ci-test.outputs.app-version || '0.0.1-SNAPSHOT' }}" >> $GITHUB_ENV
          SOPS_VERSION=$(curl -s https://api.github.com/repos/getsops/sops/releases/latest | jq -r .tag_name)
          echo "SOPS_VERSION=$SOPS_VERSION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            SOPS_VERSION=${{ env.SOPS_VERSION }}
          push: true
          tags: |
            ghcr.io/${{ env.REPO }}:${{ env.IMAGE_TAG }}
            ghcr.io/${{ env.REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # ðŸš¨ only run if this workflow was triggered by a tag push (release)
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Fetch file to be sent to server
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            docker-compose.yml
          sparse-checkout-cone-mode: false

      - name: Set up SCP
        run: |
          mkdir -v -m 700 $HOME/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} > $HOME/.ssh/known_hosts
          echo "${{ secrets.SERVER_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 400 $HOME/.ssh/id_rsa

      - name: Upload to server
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.2
        env:
          GHCR_PAT_RO: ${{ secrets.GHCR_PAT_RO }}
          GHCR_USER: ${{ github.actor }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: GHCR_PAT_RO,GHCR_USER
          script: |
            echo "${GHCR_PAT_RO}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
            cd /tmp
            docker compose pull
            docker compose up -d
            docker image prune -f
