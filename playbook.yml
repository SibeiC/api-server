---
- name: Provision and configure api-server host
  hosts: all
  become: true
  gather_facts: true

  vars:
    app_name: "api-server"
    working_dir: "/opt/{{ app_name }}"

    # Set to true for local/dev installation (changes host and port, skips deploy user)
    dev: "{{ install_dev | default(false) | bool }}"

    # Host and ports
    server_host: "{{ 'dev.chencraft.com' if dev else 'api.chencraft.com' }}"
    proxy_port: "{{ 8085 if dev else 8080 }}"

    # Nginx and TLS
    nginx_sites_available_dir: "/etc/nginx/sites-available"
    nginx_sites_enabled_dir: "/etc/nginx/sites-enabled"
    nginx_site_available: "{{ nginx_sites_available_dir }}/{{ app_name }}.conf"
    nginx_site_enabled: "{{ nginx_sites_enabled_dir }}/{{ app_name }}.conf"
    ssl_cert_path: "/etc/nginx/certs/fullchain.cer"
    ssl_cert_key_path: "/etc/nginx/certs/server.key"
    ssl_client_cert_path: "/etc/ssl/certs/rootCA.crt"

    # Inputs for PKCS#12 export (keystore)
    p12_cert_path: "/etc/ssl/certs/server.crt"
    p12_key_path: "/etc/ssl/private/server.key"

    # Default owner/group for files we manage (override via -e if needed)
    app_user: "{{ ansible_user | default('root') }}"
    app_group: "{{ ansible_user | default('root') }}"
    deploy_user: "githubdeploy"
    deploy_user_public_key: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIpJneejmAWqksgGHCcjOqyM4vCcp6edAEnJjo3hm2up ubuntu@DESKTOP-7VSUP4J"

  vars_prompt:
    - name: age_private_key
      prompt: "Enter your AGE private key (single line; leave blank to skip)"
      private: true
      default: ""

  pre_tasks:
    - name: Show selected mode
      ansible.builtin.debug:
        msg: "Running in {{ 'DEV' if dev else 'PROD' }} mode for host {{ server_host }} (proxy_port={{ proxy_port }})"

  tasks:
    - name: Create GitHub Actions deploy user (non-dev only)
      when: not dev
      block:
        - name: Ensure deploy user exists and is in docker group
          ansible.builtin.user:
            name: "{{ deploy_user }}"
            state: present
            create_home: true
            groups: docker
            append: true
            password_lock: true

        - name: Ensure .ssh directory exists
          ansible.builtin.file:
            path: "/home/{{ deploy_user }}/.ssh"
            state: directory
            owner: "{{ deploy_user }}"
            group: "{{ deploy_user }}"
            mode: "0700"

        - name: Install GitHub Actions public key if provided
          ansible.posix.authorized_key:
            user: "{{ deploy_user }}"
            key: "{{ deploy_user_public_key }}"
            state: present

    - name: Ensure SSH (22/tcp) open for remote access (non-dev only)
      when: not dev
      block:
        - name: Gather service facts
          ansible.builtin.service_facts:

        - name: Check if UFW is active
          ansible.builtin.command: ufw status
          register: ufw_status
          failed_when: false
          changed_when: false

        - name: Allow SSH via UFW when active
          ansible.builtin.command: ufw allow 22/tcp
          register: ufw_allow_ssh
          changed_when:
            - "'Skipping adding existing rule' not in ufw_allow_ssh.stdout"
            - "'Skipping adding existing rule (v6)' not in ufw_allow_ssh.stdout"
          when:
            - ufw_status.rc == 0
            - "'Status: active' in ufw_status.stdout"

        - name: Allow SSH via firewalld if running
          ansible.posix.firewalld:
            service: ssh
            permanent: true
            state: enabled
            immediate: true
          when:
            - ansible_facts.services is defined
            - ansible_facts.services['firewalld'] is defined
            - ansible_facts.services['firewalld'].state == 'running'

    - name: Ensure working directory exists
      ansible.builtin.file:
        path: "{{ working_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0750"

    - name: Deploy Nginx site configuration
      ansible.builtin.template:
        src: "templates/api-server.conf.j2"
        dest: "{{ nginx_site_available }}"
        owner: root
        group: root
        mode: "0644"
      notify: Reload nginx

    - name: Enable Nginx site via symlink
      ansible.builtin.file:
        src: "{{ nginx_site_available }}"
        dest: "{{ nginx_site_enabled }}"
        state: link
      notify: Reload nginx

    - name: Age private key is present
      when: age_private_key | length > 0
      block:
        - name: Ensure age is installed when AGE key is provided
          ansible.builtin.apt:
            name: age
            state: present

        - name: Install sops via community.sops.install role when AGE key is provided
          ansible.builtin.include_role:
            name: community.sops.install
          vars:
            sops_install_on_localhost: true
            sops_version: "3.11.0"

        - name: Create AGE private key file when provided and missing
          ansible.builtin.copy:
            content: "{{ age_private_key }}\n"
            dest: "{{ working_dir }}/age_key"
            owner: "{{ app_user }}"
            group: "{{ app_group }}"
            mode: "0600"

        - name: Check if encrypted env file exists
          ansible.builtin.stat:
            path: ".env.enc"
          register: env_enc_stat

        - name: Decrypt .env.enc to .env using sops and AGE key
          ansible.builtin.command: "sops -d --input-type dotenv --output-type dotenv --output {{ working_dir }}/.env .env.enc"
          register: decrypt_result
          environment:
            SOPS_AGE_KEY_FILE: "{{ working_dir }}/age_key"
          changed_when: false
          when:
            - env_enc_stat.stat.exists

        - name: Read decrypted .env
          ansible.builtin.slurp:
            path: "{{ working_dir }}/.env"
          register: decrypted_env_file
          when:
            - env_enc_stat is defined and env_enc_stat.stat.exists
            - decrypt_result is defined and decrypt_result.rc == 0

        - name: Extract TLS keystore password from decrypted .env
          ansible.builtin.set_fact:
            tls_keystore_password: "{{ (decrypted_env_file.content | b64decode | regex_search('(?m)^app\\.tls\\.keystore-password=(.*)$', '\\1') | first | replace('\\\
              r', '') | trim) }}"
          when:
            - decrypted_env_file is defined

        - name: Cleanup decrypted .env to avoid leaks
          ansible.builtin.file:
            path: "{{ working_dir }}/.env"
            state: absent
          when:
            - env_enc_stat is defined and env_enc_stat.stat.exists
          changed_when: false

    - name: Generate PKCS#12 keystore
      community.crypto.openssl_pkcs12:
        path: "{{ working_dir }}/server.p12"
        state: present
        privatekey_path: "{{ p12_key_path }}"
        certificate_path: "{{ p12_cert_path }}"
        friendly_name: "{{ app_name }}"
        passphrase: "{{ tls_keystore_password }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "0600"
      when: tls_keystore_password | length > 0

    - name: Uninstall api-server resources
      tags: ["never", "uninstall"]
      block:
        - name: Disable Nginx site symlink
          ansible.builtin.file:
            path: "{{ nginx_site_enabled }}"
            state: absent
          notify: Reload nginx

        - name: Remove Nginx site configuration
          ansible.builtin.file:
            path: "{{ nginx_site_available }}"
            state: absent
          notify: Reload nginx

        - name: Remove working directory
          ansible.builtin.file:
            path: "{{ working_dir }}"
            state: absent

        - name: Remove GitHub Actions deploy user and home (non-dev only)
          when: not dev
          ansible.builtin.user:
            name: "{{ deploy_user }}"
            state: absent
            remove: true

  handlers:
    - name: Reload nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded
